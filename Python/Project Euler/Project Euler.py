'''
1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23
Find the sum of all the multiples of 3 or 5 below 1000
'''

# create empty list
numbers = []

# check if the number (i) is divisible by 3 or 5 and is so add to list
for i in range(1000):
    if i % 3 == 0 or i % 5 == 0:
        numbers.append(i)

# find the total of the divisible numbers
total = sum(numbers)

# print total
print("The sum of all multiples of 3 or 5 below 1000 is : " + str(total))

'''
2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''
# declare list, total variable and irritable value for loop
fibonacci = [1]
total = 0
i = 0

# get Fibonacci sequence of values < 4000000 (loop will run infinitely if no limit value is given)
while True:
    addition = fibonacci[i] + fibonacci[i-1]
    if addition < 4000000:
        fibonacci.append(addition)
        i = i + 1
    else:
        break

# Find sum of even numbers in the list
for i in range(len(fibonacci)):
    if fibonacci[i] % 2 == 0:
        total = total + fibonacci[i]

# print the sum of even-valued numbers
print("The sum of the even-valued terms below 4000000 is: " + str(total))


'''
3 -  The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''
# declare the number to find the factor of as a limit
limit = 600851475143

# The loop will break once the itereation has reached the value of the limit
# the limit will keep decreasing as the iteration increases and becomes a factor of the limit
# up until the point the two values are equal (the equal result will be the largest prime factor)

for i in range(1,limit):
    if i == limit: 
        break
    elif limit % i == 0: 
        limit = limit / i
    else:
        i= i + 1

# Print the largest prime factor
print ("The biggest prime factor of 600851475143 is: " + str(limit)) 

'''
4 - A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.\n"
'''

"""
Initialise max min and palindrome valuse so they can be changed if necessary for a different range

The outer loop loops through values max to min decreasing by one each time.
The inner loop loops through the value of the outer loop (to ensure no repeat calculations) to min decreasing by 1 each time.
The first IF checks if the number is a palindrome.
The second IF checks if the value of the found palindrome is bigger than the previously found one,
    as the frist found palindrome is 580085 however it is not the largest.

Finally print the palindrome
"""

max = 999
min = 100
palindrome = 0

for first in range(max, min, -1): 
        for second in range(first, min, -1):
            test = first * second
            if str(test) == str(test)[::-1]: 
                if test > palindrome: 
                    palindrome = test

print("The largest palindrome from the product of two 3-digit numbers is: " + str(palindrome))


"""
5 - 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

"""

# importing the module
import math

# initialise variables

numberList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
lcm = 0

lcm = numberList[0]

# from the formula  LcmAB = a*b ÷ HcfAB and using the inbuilt hcf function we can find the lcm of the first 2 numbers
# from there if we take the result and keep iterating accross the list finding the next lcm until the last one is found. 
 
for i in range(1,len(numberList)):
    lcm = lcm * numberList[i] // math.gcd(lcm, numberList[i])

print("The smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is: " + str(lcm))


"""
6 - The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is, 3025 - 385 = 2640
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."
"""

# function to find the sum of the squares
def sumSquare(limit):
    result = 0
    for i in range(1, limit + 1):
        result = result + i**2
    return result

# function to find the square of the sum

def squareSum(limit):
    result = 0
    for i in range(1, limit + 1):
        result = result + i
    return result**2

limit = 100

# find the difference
print("The difference is: " + str(squareSum(limit) - sumSquare(limit)))


"""
7 - By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10001st prime number?
"""

# import module
import math

# create function to check if number is prime
# If below 2 not prime
# in FOR check if i is factor of number up to the root as factors are paired above and below the root,
#  so we only have to check against the first half of the pairs

def primeCheck(number):
    if number < 2:
        return False
    for i in range(2, math.floor(math.sqrt(number)) + 1):
        if number % i == 0:
            return False
    return True

# declare variables

limit = 10001
primeCounter = 1 # counter starts at 1 as 2 is the only even prime 
number = 1

# incriment number by 2 because all even numbers above 2 aren't prime so they can be skipped
while primeCounter < limit:
    number += 2
    if primeCheck(number):
        primeCounter += 1

print("The 10001st prime number is: " + str(number))


"""
8 - A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    a^2 + b^2 = c^2
    "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
    "There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    "Find the product abc.
"""

# declare variables
limit = 1000
prodABC = 0

# a loops from 1 - 1000
# since b > a loop b from a + 1 - 1000
# finally check if the 2 integers satisfy the condition a² + b² = c², if so find the product
for a in range(1, limit + 1):
    for b in range(a + 1, limit + 1):
      c = limit - a - b;
      if c < 0:
        break;
      if a * a + b * b == c * c:
          prodABC = a*b*c

print("product of abc, where a + b + c = 1000 is: " + str(prodABC))


"""
9 - The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
     Find the sum of all the primes below two million.
"""


# import module
import math

# modify function from Q7 to be more efficient to check if number is prime
# apparenntly every prime bigger than 3 is “next” to a multiple of 6,
# therefore we increment (i) by 6 each time then divide the number by i-1 and i+1 and there is a remainder then the number is prime

def primeCheck(number):
    if number < 2:
        return False
    if number == 2 or number == 3:
        return True
    if number % 2 == 0 or number % 3 == 0:
        return False
    for i in range(6, math.floor(math.sqrt(number)) + 2, 6):
        if number % (i - 1) == 0 or number % (i + 1) == 0:
            return False
    return True


limit = 2000000
primeSum = 2 # sum starts at 2 because we skip it in the loop
number = 1 # counter starts at 1 as 2 is the only even prime

# incriment number by 2 because all even numbers above 2 aren't prime so they can be skipped
while number < limit:
    number += 2
    if primeCheck(number):
        primeSum += number

print("The sum of prime numbers below 2000000 is: " + str(primeSum))


"""
10 - The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    
    The first ten terms would be:
    "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    "Let us list the factors of the first seven triangle numbers:
    "     1: 1,
    "     3: 1,3,
    "     6: 1,2,3,6,
    "    10: 1,2,5,10,
    "    15: 1,3,5,15,
    "    21: 1,3,7,21
    "    28: 1,2,4,7,14,28
    "We can see that 28 is the first triangle number to have over five divisors.
    "What is the value of the first triangle number to have over five hundred divisors?
"""

import math

# From Q7 we know factors are are paird so only search to squareroot,
# when a factoris found, int divide to get the first half oid the pair and have i be the second half of the pair
def numFactors(number):
    result_set = set()
    for i in range(1, int( math.sqrt(number)+1)):
        if number % i == 0:
            result_set.add(number // i)
            result_set.add(i)
    return len(result_set)

# declare variables
term = 0
step = 1
limit = 500

# run an infinite loop then break out once the term with 500 factors is found
while True:
    term = term + step
    if numFactors(term) > limit:
        break
    step+=1

print("The value of the first triangle number to have over five hundred divisors is: " + str(term))